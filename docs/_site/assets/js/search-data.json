{"0": {
    "doc": "Code to generate documentation for MALTS",
    "title": "Code to generate documentation for MALTS",
    "content": "# Code to generate documentation for `MALTS` This directory contains the code for the web site as displayed at https://almost-matching-exactly.github.io/MALTS/ Please go to that site to view the documentation. ",
    "url": "http://localhost:4000/MALTS/",
    "relUrl": "/"
  },"1": {
    "doc": "FAQ and Vocabulary Guide",
    "title": "FAQ and Vocabulary Guide",
    "content": ". | Vocabulary Guide | FAQ . | What kind of covariates can the dataset have? | Why doesn’t the package have any built-in visualization methods? | Why should I use this instead of another package? Other ones seem more common! | I have a question not covered here | . | . ",
    "url": "http://localhost:4000/MALTS/FAQ",
    "relUrl": "/FAQ"
  },"2": {
    "doc": "FAQ and Vocabulary Guide",
    "title": "Vocabulary Guide",
    "content": "We briefly define some of the terms we use interchangeably throughout this User Guide and in this documentation below. | Unit, Observation, Individual | A participant in the research trial, in either the control group or treatment group, for whom we have an observed outcome | . | Covariate, Observed data, X’s, Independent variables | The data we observe which is not the treatment group or the outcome | . | Outcome, Y, Dependent variables | The outcome variable of the research | . | Treated Unit | A unit which is in the treatment group | . | Treatment Effects | The effect on the outcome by the treatment. | . | Matched group, matches | The list of units a particular covariate is matched with, including their weights | . ",
    "url": "http://localhost:4000/MALTS/FAQ#vocabulary-guide",
    "relUrl": "/FAQ#vocabulary-guide"
  },"3": {
    "doc": "FAQ and Vocabulary Guide",
    "title": "FAQ",
    "content": "What kind of covariates can the dataset have? . MALTS works on continuous, categorical or mixed covariates. Why doesn’t the package have any built-in visualization methods? . Visualizing data is a valuable tool to understanding it before and after performing any analysis like matching. While the PYMALTS2 package doesn’t have built in functions to visualize the data, we provide several examples of ways that researchers could visualize any dataset. Why should I use this instead of another package? Other ones seem more common! . The matches produced by the Pymalts2 package are higher quality. Pymalts2 doesn’t use uninterpretable propensity scores, it matches on actual covariates. It doesn’t require the user to specify the metric like CEM, since it uses machine learning to learn the metric adaptively. It is not based on a black box machine learning method like Causal Forest or BART, but it can often be just as accurate, and it’s much easier to troubleshoot! [1]. I have a question not covered here . Please reach out to let our team know if you’re using this, or if you have any questions. Contact Harsh Parikh at harsh.parikh@duke.edu . References . [1] Parikh, Rudin, et al. MALTS: Matching After Learning to Stretch. ",
    "url": "http://localhost:4000/MALTS/FAQ#faq",
    "relUrl": "/FAQ#faq"
  },"4": {
    "doc": "API Documentation",
    "title": "API Documentation",
    "content": " ",
    "url": "http://localhost:4000/MALTS/api-documentation",
    "relUrl": "/api-documentation"
  },"5": {
    "doc": "MALTS",
    "title": "Malts_MF Class",
    "content": "class pymalts.malts_mf(outcome,treatment,data,discrete=[],C=1,k_tr=15,k_est=50, estimator=\"linear\",smooth_cate=True,reweight=False,n_splits=5, n_repeats=1,output_format=\"brief\") . Source Code . This class creates the matches based on the MALTS: “Matching After Learning to Stretch” algorithm. It has built in support for stopping criteria and missing data handling. ",
    "url": "http://localhost:4000/MALTS/api-documentation/pymalts#malts_mf-class",
    "relUrl": "/api-documentation/pymalts#malts_mf-class"
  },"6": {
    "doc": "MALTS",
    "title": "Parameters",
    "content": "Required Parameters . | Parameter Name | Type | Default | Description | . | data | file, Dataframe | required | The data to be matched. Preferably, the data should be in the form of a Python Pandas DataFrame. | . | outcome | string | required | The column name containing the name of the outcome variable, which itself is numeric. | . | treated | string | required | The column name denoting whether the unit is treated or control for the matching procedure. | . Optional Parameters . | discrete | list | [ ] | The list of columns that have been dummified (discrete). | . | C | integer | 1 | The regularization constant used in the objective method with the matrix. | . | k_tr | integer | 15 | The size of the matched group in the training step. | . | k_est | integer | 50 | The size of the matched group in the estimation step. | . | estimator | string | ‘linear’ | The method used to estimate the CATE value inside a matched group. The possible options are ‘linear’, ‘mean’ or ‘RF’, which use ridge regression, mean regression, and Random Forest regression, respectively. | . | smooth_cate | boolean | True | Boolean to specify whether the CATE estimates should be smoothened by using a regression model to obtain a fit. | . | reweight | boolean | False | Boolean to specify if treatment and control groups should be reweighted as per their sample sizes in the training step. | . | n_splits | integer | 5 | The number of splits of the data when n_split-fold procedure is used. | . | n_repeats | integer | 1 | The number of times the whole procedure is repeated. | . | output_format | string | ‘brief’ | The style in which the output CATE dataframe is to be displayed. Possible options are ‘brief’ and ‘full’. If ‘full’ is chosen, the entire dataframe is displayed, if ‘brief’ is chosen, only the columns ‘avg_CATE’, ‘std_CATE’, ‘outcome’, and ‘treatment’ are displayed. | . ",
    "url": "http://localhost:4000/MALTS/api-documentation/pymalts#parameters",
    "relUrl": "/api-documentation/pymalts#parameters"
  },"7": {
    "doc": "MALTS",
    "title": "MALTS",
    "content": " ",
    "url": "http://localhost:4000/MALTS/api-documentation/pymalts",
    "relUrl": "/api-documentation/pymalts"
  },"8": {
    "doc": "Contributing Guide",
    "title": "Contributing Guide",
    "content": "Thank you for considering contributing to pymalts2. Contributions are welcome from first time or advanced users, as are stories of use cases. Any learning algorithm can be used to predict covariate importance, beyond the ones we have chosen to incorporate, based on our impression of the most valuable algorithms. These can easily be added, using standard off-the-shelf methods, as a new feature. There are many other ways to contribute to the package. We welcome contributers who wish to report any unexpected bugs, clean or maintain code, add details or use cases to the documentation, and add more test cases. ",
    "url": "http://localhost:4000/MALTS/getting-started/contributing_guide/",
    "relUrl": "/getting-started/contributing_guide/"
  },"9": {
    "doc": "Contributing Guide",
    "title": "Submitting Bug Reports or Feature Requests",
    "content": "Please open an issue on Github here: https://github.com/almost-matching-exactly/MALTS/issues/ . If this is a bug request, we ask that you describe the issue in as much detail as possible, including a description of expected results and experienced results. An example including datasets if possible could also be helpful. This is because reproducing an issue is critical to fixing it. If this is a feature request, we ask that you describe your use case and link any relevant references, in order for us to ensure that our features will meet your needs. You can also email our team to discuss if that is easier for you. ",
    "url": "http://localhost:4000/MALTS/getting-started/contributing_guide/#submitting-bug-reports-or-feature-requests",
    "relUrl": "/getting-started/contributing_guide/#submitting-bug-reports-or-feature-requests"
  },"10": {
    "doc": "Contributing Guide",
    "title": "Contributing Code",
    "content": "Please contribute to the code using standard open source protocol. In brief, after forking the repository on github, edit your files locally (We prefer to use the Sypder IDE for this), commit changes to your fork, and submit a pull request with a detailed explanation of your contributions. | Ensure that your code meets our style guide standards for readability. We mostly adhere to the Google Python Style Gude, found here. | Ensure that your code meets our maintainability standards. We aim to ensure highly modularized, short code that is easy to use, debug, and maintain. If you can refactor anything, do it. | Write a test for your code, write an example illustrating it, and update the documentation accordingly. The documentation is found in the ‘docs’ folder of the Github here: https://github.com/almost-matching-exactly/MALTS. We recommend using Visual Studio Code. The documentation can be compiled and previewed using the command: . | . bundle exec jekyll serve . ",
    "url": "http://localhost:4000/MALTS/getting-started/contributing_guide/#contributing-code",
    "relUrl": "/getting-started/contributing_guide/#contributing-code"
  },"11": {
    "doc": "Contributing Guide",
    "title": "Questions",
    "content": "If you have any questions or need assistance with a contribution, please reach out to our team. Contact harsh “dot” parikh “at” duke “dot” edu . ",
    "url": "http://localhost:4000/MALTS/getting-started/contributing_guide/#questions",
    "relUrl": "/getting-started/contributing_guide/#questions"
  },"12": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": " ",
    "url": "http://localhost:4000/MALTS/getting-started",
    "relUrl": "/getting-started"
  },"13": {
    "doc": "Installation and Quickstart Example",
    "title": "Installation and Quickstart Example",
    "content": ". | Installation and Quickstart Example . | Dependencies | Installation | Quickstart Example | Matched Groups | . | . ",
    "url": "http://localhost:4000/MALTS/getting-started/installation_example/",
    "relUrl": "/getting-started/installation_example/"
  },"14": {
    "doc": "Installation and Quickstart Example",
    "title": "Dependencies",
    "content": "This package requires prior installation of . | Python (&gt;= 3.0) | NumPy (&gt;= 1.17.5) | Scikit-Learn (&gt;= 0.22.1)) | Pandas (todo: check) | Matplotlib | Seaborn | . If your computer system does not have python 3.*, install from here. If your python version does not have the Pandas, Scikit learn, or Numpy packages, install from here . ",
    "url": "http://localhost:4000/MALTS/getting-started/installation_example/#dependencies",
    "relUrl": "/getting-started/installation_example/#dependencies"
  },"15": {
    "doc": "Installation and Quickstart Example",
    "title": "Installation",
    "content": "The MALTS Python Package is available for download on the almost-matching-exactly Github or via PyPi (recommended): . pip install pymalts2 . ",
    "url": "http://localhost:4000/MALTS/getting-started/installation_example/#installation",
    "relUrl": "/getting-started/installation_example/#installation"
  },"16": {
    "doc": "Installation and Quickstart Example",
    "title": "Quickstart Example",
    "content": "We show the working of the package. In this example, we provide only the basic inputs: (1) input data as a dataframe or file, (2) the name of the outcome column, and (3) the name of the treatment column. In order to set up the model for learning the distance metric, we consider: . | Variable name for the outcome variable: ‘outcome’. | Variable name for the treatment variable: ‘treated’ | Data is assigned to python variable df | . import pandas as pd import pymalts2 as pymalts import numpy as np import matplotlib.pyplot as plt import seaborn as sns df = pd.read_csv('example/example_data.csv',index_col=0) print(df.shape) df.head() #&gt; (2500, 20) #&gt; X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 X15 X16 X17 X18 outcome treated #&gt;1355 1.881335 1.684164 0.532332 2.002254 1.435032 1.450196 1.974763 1.321659 0.709443 -1.141244 0.883130 0.956721 2.498229 2.251677 0.375271 -0.545129 3.334220 0.081259 -15.679894 0 #&gt;1320 0.666476 1.263065 0.657558 0.498780 1.096135 1.002569 0.881916 0.740392 2.780857 -0.765889 1.230980 -1.214324 -0.040029 1.554477 4.235513 3.596213 0.959022 0.513409 -7.068587 0 #&gt;1233 -0.193200 0.961823 1.652723 1.117316 0.590318 0.566765 0.775715 0.938379 -2.055124 1.942873 -0.606074 3.329552 -1.822938 3.240945 2.106121 0.857190 0.577264 -2.370578 -5.133200 0 #&gt;706 1.378660 1.794625 0.701158 1.815518 1.129920 1.188477 0.845063 1.217270 5.847379 0.566517 -0.045607 0.736230 0.941677 0.835420 -0.560388 0.427255 2.239003 -0.632832 39.684984 1 #&gt;438 0.434297 0.296656 0.545785 0.110366 0.151758 -0.257326 0.601965 0.499884 -0.973684 -0.552586 -0.778477 0.936956 0.831105 2.060040 3.153799 0.027665 0.376857 -1.221457 -2.954324 0 m = pymalts.malts_mf( outcome='outcome', treatment='treated', data=df) # running MALTS with default setting . ",
    "url": "http://localhost:4000/MALTS/getting-started/installation_example/#quickstart-example",
    "relUrl": "/getting-started/installation_example/#quickstart-example"
  },"17": {
    "doc": "Installation and Quickstart Example",
    "title": "Matched Groups",
    "content": "Matched Group matrix (MG_matrix) is NxN matrix with each row corresponding to each query unit and each column corresponds to matched units. Cell (i,j) in the matrix corresponds to the weight of unit j in the matched group of unit i. The weight corresponds to the numbers of times a unit is included in a matched group across M-folds. The CATE_df dataframe in the model m gives us the CATE estimate for a corresponding unit in each row. print (m.CATE_df) #&gt; avg.CATE std.CATE outcome treated #&gt;0 47.232061 21.808950 -15.313091 0.0 #&gt;1 40.600643 21.958906 -16.963202 0.0 #&gt;2 40.877320 22.204570 9.527929 1.0 #&gt;3 37.768578 19.740320 -3.940218 0.0 #&gt;4 39.920257 21.744433 -8.011915 0.0 #&gt;........... #&gt;2495 49.227788 21.581176 -14.529871 0.0 #&gt;2496 42.352355 21.385861 19.570055 1.0 #&gt;2497 43.737763 19.859275 -16.342666 0.0 #&gt;2498 41.189297 20.346711 -9.165242 0.0 #&gt;2499 45.427037 23.762884 -17.604829 0.0 ATE = m.CATE_df['avg.CATE'].mean() print (ATE) #&gt;42.29673993471417 . ",
    "url": "http://localhost:4000/MALTS/getting-started/installation_example/#matched-groups",
    "relUrl": "/getting-started/installation_example/#matched-groups"
  },"18": {
    "doc": "Home",
    "title": "Welcome to the MALTS Python Package Documentation!",
    "content": "View us on GitHub . pymalts2 is a Python package for performing matching for observational causal inference on datasets containing continuous, categorical, or mixed covariates. It uses exact matching for discrete variables and learns generalized Mahalanobis distances for continuous variables. Instead of a predetermined distance metric, the covariates contributing more towards predicting the outcome are given higher weights. ",
    "url": "http://localhost:4000/MALTS/#welcome-to-the-malts-python-package-documentation",
    "relUrl": "/#welcome-to-the-malts-python-package-documentation"
  },"19": {
    "doc": "Home",
    "title": "Contact",
    "content": "Please reach out to let our team know if you’re using this, or if you have any questions! Contact Harsh Parikh at harsh.parikh@duke.edu. ",
    "url": "http://localhost:4000/MALTS/#contact",
    "relUrl": "/#contact"
  },"20": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/MALTS/",
    "relUrl": "/"
  },"21": {
    "doc": "Introduction to Causal Inference",
    "title": "Introduction",
    "content": ". | Introduction to Causal Inference | Introduction to Matching | Challenges in Matching Methods | . ",
    "url": "http://localhost:4000/MALTS/user-guide/Introduction#introduction",
    "relUrl": "/user-guide/Introduction#introduction"
  },"22": {
    "doc": "Introduction to Causal Inference",
    "title": "Introduction to Causal Inference",
    "content": "Causal inference is the attempt to draw conclusions that something is being caused by something else. It goes beyond questions of correlation, association, and is distinct from model-based predictive analysis. Questions of robust causal inference are practically unavoidable in health, medicine, or social studies. Much of the available data in the clinical and social sciences is observational, and we can only observe one outcome per individual. For example, if one individual took pain reliever for a headache and they now feel better, we don’t know what would have happened to that same individual over the same time period, if they had not taken pain reliever. Taking the pain reliever puts them in the treatment group, but since we don’t know what the control outcome of not taking pain reliever would be (without time travel), how can we say pain reliever caused the headache to go away? . ",
    "url": "http://localhost:4000/MALTS/user-guide/Introduction",
    "relUrl": "/user-guide/Introduction"
  },"23": {
    "doc": "Introduction to Causal Inference",
    "title": "Introduction to Matching",
    "content": "When estimating causal effects in an observational setting, one common approach is to match each treatment unit to an identical control unit. Going back to the example, can we find two people sharing every physical attribute, who also had the exact same symptoms, prior to the time when only one of them taking the pain reliever? Secondly, how did their outcomes differ? . In large datasets where we observe many characteristics about individuals, few “identical twins”, (referred to as “exact matches”) exist. What is the best way to match individuals that were treated and controlled? Only once they’re matched are we able to apply common treatment effect estimators to the groups of matched individuals, in order to try to determine the effect of treatment. ",
    "url": "http://localhost:4000/MALTS/user-guide/Introduction#introduction-to-matching",
    "relUrl": "/user-guide/Introduction#introduction-to-matching"
  },"24": {
    "doc": "Introduction to Causal Inference",
    "title": "Challenges in Matching Methods",
    "content": "“Exact matching” isn’t possible when we a dataset has lots of characteristics about individuals, or is high dimensional. So, matching methods performing the best-possible alternative should be interpretable. Users of matching algorithms need to be able to easily understand which covariates were selected to be most important to their outcome, and need be able to find out why they were selected. This is important so that causal analysis can provide crucial information on who benefits from treatment most, where resources should be spent for future treatments, and why some individuals benefit from treatment while others were not. This can also help researchers determine what type of additional data must be collected. Secondly, the matches should also be high quality. If an oracle could tell us the exact result of doing treatment on any individual whose treatment we did not observe, then would we find that our estimate of the effect of treatment on that individual is accurate? . Further Readings . For more information on causal inference research and its assumptions and issues, we recommend Imbens, Guido W., and Donald B. Rubin. Causal inference in statistics, social, and biomedical sciences. ",
    "url": "http://localhost:4000/MALTS/user-guide/Introduction#challenges-in-matching-methods",
    "relUrl": "/user-guide/Introduction#challenges-in-matching-methods"
  },"25": {
    "doc": "Whether to use Matching",
    "title": "To Match or Not To Match",
    "content": "That is the question . | Determining Whether to Use Matching Methods . | The Stable Unit Treatment Value Assumption (SUTVA) | The Unconfoundedness Assumption | Overlap of Treatment and Control Groups | . | . ",
    "url": "http://localhost:4000/MALTS/user-guide/to-match-or-not#to-match-or-not-to-match",
    "relUrl": "/user-guide/to-match-or-not#to-match-or-not-to-match"
  },"26": {
    "doc": "Whether to use Matching",
    "title": "Determining Whether to Use Matching Methods",
    "content": "Matching of treatment and control units can be a good method in order to determine treatment effects. However, certain criteria must be upheld in order for matching to be an appropriate solution for a given dataset. If these criteria are not upheld, perhaps other approaches to causal inference should be used in place of, or in addition to matching. The Stable Unit Treatment Value Assumption (SUTVA) . Treatments applied to one unit should not affect the outcome of another unit. Units can not interfere with one another. This is reasonable in many situations: If two individuals are not in contact with each other, how would one individual taking a pain medication impact the outcome of another individual. We should also assume that the treatment doesn’t have varying forms, and is completely binary. Individuals can not have taken pain medication of different strengths. The Unconfoundedness Assumption . This is also referred to as “ignorability”. It is important that the outcome is independent of the treatment when observable covaraiates are held constant. Omitted variable bias is a common issue that occurs when a variable impacts both treatment and outcomes, and appears in a bias of treatment effect estimates. In the example about pain medications, if a researcher fails to include in their dataset some underlying health condition that impacts response to pain medication, the impact of taking pain medication for a headache might be evaluated incorrectly. Overlap of Treatment and Control Groups . A common problem in causal inference is overlap or imbalance between treatment and control groups. A treatment and control group would have no overlap if none of the covariates have the same values. In this case, the FLAME and DAME algorithms would not find any matches, and no treatment effect estimates would be possible. Further Readings . For more information on causal inference research and its assumptions and issues, we recommend Imbens, Guido W., and Donald B. Rubin. Causal inference in statistics, social, and biomedical sciences. ",
    "url": "http://localhost:4000/MALTS/user-guide/to-match-or-not#determining-whether-to-use-matching-methods",
    "relUrl": "/user-guide/to-match-or-not#determining-whether-to-use-matching-methods"
  },"27": {
    "doc": "Whether to use Matching",
    "title": "Whether to use Matching",
    "content": " ",
    "url": "http://localhost:4000/MALTS/user-guide/to-match-or-not",
    "relUrl": "/user-guide/to-match-or-not"
  },"28": {
    "doc": "User Guide",
    "title": "User Guide",
    "content": " ",
    "url": "http://localhost:4000/MALTS/user-guide",
    "relUrl": "/user-guide"
  }
}
